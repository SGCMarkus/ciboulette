#Update swap
~$sudo fallocate -l 2G /swapfile
~$sudo chmod 600 /swapfile
~$sudo mkswap /swapfile
~$sudo swapon /swapfile
~$sudo swapon --show
~$free -h
~$sudo cp /etc/fstab /etc/fstab.bak
~$echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

#Optional
~$sudo nano /etc/sysctl.conf
#Put options
vm.swappiness=20
vm.vfs_cache_pressure=50

#update OS
~$sudo apt update
~$sudo apt upgrade
~$reboot

Welcome to Ubuntu 21.10 (GNU/Linux 5.13.0-1015-raspi armv7l)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Tue Jan 25 21:19:35 UTC 2022

  System load:           2.07
  Usage of /:            10.4% of 59.10GB
  Memory usage:          47%
  Swap usage:            0%
  Temperature:           49.9 C
  Processes:             149
  Users logged in:       0
  IPv4 address for usb0: 192.168.1.40
  IPv6 address for usb0: 2a01:cb06:114:6200:205:1bff:feba:611b

 * Super-optimized for small spaces - read how we shrank the memory
   footprint of MicroK8s to make it the smallest full K8s around.

   https://ubuntu.com/blog/microk8s-memory-optimisation

3 updates can be applied immediately.
To see these additional updates run: apt list --upgradable

#Installation de indilib
~$sudo apt-add-repository ppa:mutlaqja/ppa
~$sudo apt-get update
~$sudo apt-get install indi-full

#Installation de pip
~$sudo apt install python3-pip

Installation de jupyter
~$pip install jupyter
~$pip install jupyterlab
~$.local/bin/jupyter notebook --generate-config

#Installation Astronomy package 
~$pip install numpy
~$pip install bs4
~$pip install astropy
~$pip install astroquery
~$pip install wget
~$pip install alpyca

# Installation de RPi.GPIO
~$sudo apt-get -y install python3-rpi.gpio

# Installation PIGPIO
# Site https://abyz.me.uk/rpi/pigpio/index.html
# Téléchargé le code source et le compiler
~$wget https://github.com/joan2937/pigpio/archive/master.zip
~$unzip master.zip
~$cd pigpio-master
~$make
~$sudo make install

# Installation de CMAKE
~$sudo apt install cmake

# Installation de INDILIB
~$sudo apt install libindi-dev libnova-dev libz-dev libgsl-dev
# Installation GIT https://github.com/indilib/indi
~$git clone https://github.com/indilib/indi

# Installation de RPi.GPIO
~$sudo apt-get -y install python3-rpi.gpio

# Test motor.py
# https://www.aranacorp.com/fr/pilotez-un-moteur-pas-a-pas-avec-raspberrypi/
#######################################################################################################
#                                        MOTOR.PY@31/01/2022                                          #
#######################################################################################################
#!/usr/bin/env python 
# -*- coding: utf-8 -*-
# libraries
import time
import RPi.GPIO as GPIO
# Use BCM GPIO references
# Instead of physical pin numbers
GPIO.setmode(GPIO.BCM)
# Define GPIO signals to use Pins 18,22,24,26 GPIO24,GPIO25,GPIO8,GPIO7
# Define GPIO signals to use Pins 16,18,24,26 GPIO23,GPIO24,GPIO8,GPIO7
StepPins = [24,25,8,7]
# Set all pins as output
for pin in StepPins:
        print("Setup pins")
        GPIO.setup(pin,GPIO.OUT)
        GPIO.output(pin, False)
# Define time delay between steps
WaitTime = 0.001 #set speed
# Define simple sequence
StepCount1 = 4
Seq1 = []
Seq1 = [i for i in range(0, StepCount1)]
Seq1[0] = [1,0,0,0]
Seq1[1] = [0,1,0,0]
Seq1[2] = [0,0,1,0]
Seq1[3] = [0,0,0,1]
# Define advanced half-step sequence
StepCount2 = 8
Seq2 = []
Seq2 = [i for i in range(0, StepCount2)]
Seq2[0] = [1,0,0,0]
Seq2[1] = [1,1,0,0]
Seq2[2] = [0,1,0,0]
Seq2[3] = [0,1,1,0]
Seq2[4] = [0,0,1,0]
Seq2[5] = [0,0,1,1]
Seq2[6] = [0,0,0,1]
Seq2[7] = [1,0,0,1]
# Choose a sequence to use
Seq = Seq2
StepCount = StepCount2
def steps(nb):
        StepCounter = 0
        if nb<0: sign=-1
        else: sign=1
        nb=sign*nb*2 #times 2 because half-step
        print("nbsteps {} and sign {}".format(nb,sign))
        for i in range(nb):
                for pin in range(4):
                        xpin = StepPins[pin]
                        if Seq[StepCounter][pin]!=0:
                                GPIO.output(xpin, True)
                        else:
                                GPIO.output(xpin, False)
                StepCounter += sign
        # If we reach the end of the sequence
        # start again
                if (StepCounter==StepCount):
                        StepCounter = 0
                if (StepCounter<0):
                        StepCounter = StepCount-1
                # Wait before moving on
                time.sleep(WaitTime)
# Start main loop
nbStepsPerRev=2048
_45d = int(2048*45/360)
print("45°:",_45d)
nbStepsPerRev=_45d
if __name__ == '__main__' :
    hasRun=False
    while not hasRun:
            steps(nbStepsPerRev)# parcourt un tour dans le sens horaire
            time.sleep(1)
            steps(-nbStepsPerRev)# parcourt un tour dans le sens anti-horaire
            time.sleep(1)
            hasRun=True
    print("Stop motor")
    for pin in StepPins:
            GPIO.output(pin, False)
#######################################################################################################
#######################################################################################################

# Création du driver INDI
# Voir documentatnion https://docs.indilib.org/drivers/simple.html
